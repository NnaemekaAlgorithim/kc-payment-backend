# Generated by Django 5.2.2 on 2025-08-14 10:47

import django.core.validators
import django.db.models.deletion
import payment.apps.transactions.models
import payment.apps.transactions.storage
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.CharField(editable=False, max_length=26, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', help_text='Current status of the transaction', max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Transaction amount', max_digits=15)),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('CHF', 'Swiss Franc'), ('CAD', 'Canadian Dollar'), ('AUD', 'Australian Dollar'), ('NZD', 'New Zealand Dollar'), ('CNY', 'Chinese Yuan'), ('INR', 'Indian Rupee'), ('KRW', 'South Korean Won'), ('SGD', 'Singapore Dollar'), ('HKD', 'Hong Kong Dollar'), ('THB', 'Thai Baht'), ('MYR', 'Malaysian Ringgit'), ('IDR', 'Indonesian Rupiah'), ('PHP', 'Philippine Peso'), ('VND', 'Vietnamese Dong'), ('TWD', 'Taiwan Dollar'), ('AED', 'UAE Dirham'), ('SAR', 'Saudi Riyal'), ('QAR', 'Qatari Riyal'), ('KWD', 'Kuwaiti Dinar'), ('BHD', 'Bahraini Dinar'), ('OMR', 'Omani Rial'), ('ILS', 'Israeli Shekel'), ('EGP', 'Egyptian Pound'), ('ZAR', 'South African Rand'), ('NGN', 'Nigerian Naira'), ('KES', 'Kenyan Shilling'), ('GHS', 'Ghanaian Cedi'), ('NOK', 'Norwegian Krone'), ('SEK', 'Swedish Krona'), ('DKK', 'Danish Krone'), ('PLN', 'Polish Zloty'), ('CZK', 'Czech Koruna'), ('HUF', 'Hungarian Forint'), ('RON', 'Romanian Leu'), ('BGN', 'Bulgarian Lev'), ('HRK', 'Croatian Kuna'), ('RUB', 'Russian Ruble'), ('UAH', 'Ukrainian Hryvnia'), ('TRY', 'Turkish Lira'), ('BRL', 'Brazilian Real'), ('MXN', 'Mexican Peso'), ('ARS', 'Argentine Peso'), ('CLP', 'Chilean Peso'), ('COP', 'Colombian Peso'), ('PEN', 'Peruvian Sol'), ('UYU', 'Uruguayan Peso'), ('BOB', 'Bolivian Boliviano'), ('PYG', 'Paraguayan Guarani'), ('RMB', 'Chinese Renminbi'), ('XAU', 'Gold Ounce'), ('XAG', 'Silver Ounce'), ('BTC', 'Bitcoin'), ('ETH', 'Ethereum')], default='USD', help_text='Currency code (ISO 4217)', max_length=3)),
                ('description', models.TextField(blank=True, help_text='Transaction description or memo', null=True)),
                ('user_payment_method', models.CharField(blank=True, help_text='Payment method used by user (e.g., Bank Transfer, Credit Card, etc.)', max_length=100, null=True)),
                ('user_bank_name', models.CharField(blank=True, help_text="User's bank name for the payment", max_length=255, null=True)),
                ('user_account_name', models.CharField(blank=True, help_text="User's account holder name", max_length=255, null=True)),
                ('user_account_number', models.CharField(blank=True, help_text="User's account number used for payment", max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Account number can only contain numbers, hyphens, and spaces', regex='^[0-9\\-\\s]*$')])),
                ('user_payment_reference', models.CharField(blank=True, help_text="Payment reference number from user's bank/payment method", max_length=100, null=True)),
                ('user_payment_slip', models.FileField(blank=True, help_text="User's payment slip or proof of payment (PDF, image, etc.)", null=True, upload_to=payment.apps.transactions.models.transaction_file_upload_path, validators=[payment.apps.transactions.storage.validate_supporting_document])),
                ('receiver_account_name', models.CharField(help_text="Name of the receiver's account holder", max_length=255)),
                ('receiver_account_number', models.CharField(help_text="Receiver's account number", max_length=50, validators=[django.core.validators.RegexValidator(message='Account number can only contain numbers, hyphens, and spaces', regex='^[0-9\\-\\s]+$')])),
                ('receiver_swift_code', models.CharField(help_text="Receiver's bank SWIFT/BIC code", max_length=11, validators=[django.core.validators.RegexValidator(message='Invalid SWIFT code format', regex='^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$')])),
                ('receiver_barcode_image', models.FileField(blank=True, help_text="Receiver's barcode picture (PDF, PNG, JPG, etc.) - stored in GCP Cloud Storage", null=True, upload_to=payment.apps.transactions.models.transaction_file_upload_path, validators=[payment.apps.transactions.storage.validate_barcode_image])),
                ('transaction_completion_document', models.FileField(blank=True, help_text='Transaction completion document uploaded by admin (receipt, confirmation, etc.)', null=True, upload_to=payment.apps.transactions.models.transaction_file_upload_path, validators=[payment.apps.transactions.storage.validate_supporting_document])),
                ('additional_completion_document', models.FileField(blank=True, help_text='Additional completion document if needed (PDF, image, etc.)', null=True, upload_to=payment.apps.transactions.models.transaction_file_upload_path, validators=[payment.apps.transactions.storage.validate_supporting_document])),
                ('reference_number', models.CharField(blank=True, help_text='Unique transaction reference number', max_length=100, null=True, unique=True)),
                ('notes', models.TextField(blank=True, help_text='Internal notes for the transaction', null=True)),
                ('processing_admin', models.ForeignKey(blank=True, help_text='Admin user who is currently processing this transaction', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processing_transactions', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='User who initiated the transaction', on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'db_table': 'payment_transactions',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'status'], name='payment_tra_user_id_131e27_idx'), models.Index(fields=['reference_number'], name='payment_tra_referen_0f91ab_idx'), models.Index(fields=['created_at'], name='payment_tra_created_e43546_idx'), models.Index(fields=['processing_admin'], name='payment_tra_process_b13edf_idx')],
            },
        ),
    ]
